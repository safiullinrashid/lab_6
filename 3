#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <stdlib.h>

void print_info(int process_number) {
    struct timespec ts;
    clock_gettime(CLOCK_REALTIME, &ts);
    struct tm *tm = localtime(&ts.tv_sec);
    printf("Процесс %d: pid=%d, ppid=%d, время: %02d:%02d:%02d:%03ld\n",
           process_number, getpid(), getppid(),
           tm->tm_hour, tm->tm_min, tm->tm_sec, ts.tv_nsec / 1000000);
}

void process_function(int process_number) {
    int sleep_time = process_number * 200;  // Время сна в мс
    while (1) {
        print_info(process_number);
        usleep(sleep_time * 1000);  // Переводим мс в микросекунды
    }
}

int main() {
    printf("Родительский процесс P1: pid=%d\n", getpid());

    // Создание процессов P2 и P3
    pid_t p2 = fork();
    if (p2 == 0) {
        // Процесс P2
        pid_t p4 = fork();
        if (p4 == 0) {
            process_function(4);
            exit(0);
        }

        pid_t p5 = fork();
        if (p5 == 0) {
            process_function(5);
            exit(0);
        }

        process_function(2);
        exit(0);
    }

    pid_t p3 = fork();
    if (p3 == 0) {
        // Процесс P3
        pid_t p6 = fork();
        if (p6 == 0) {
            process_function(6);
            exit(0);
        }

        pid_t p7 = fork();
        if (p7 == 0) {
            process_function(7);
            exit(0);
        }

        process_function(3);
        exit(0);
    }

    // Родительский процесс ожидает завершения всех дочерних процессов
    while (wait(NULL) > 0);

    return 0;
}
