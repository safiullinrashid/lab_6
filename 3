#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>
#include <string.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <errno.h>
#include <limits.h>

int is_regular_file(const char *path) {
    struct stat st;
    if (stat(path, &st) != 0)
        return 0;
    return S_ISREG(st.st_mode);
}

int compare_files(const char *file1, const char *file2, long *bytes_examined) {
    FILE *f1 = fopen(file1, "rb");
    FILE *f2 = fopen(file2, "rb");
    if (!f1 || !f2) {
        if (f1) fclose(f1);
        if (f2) fclose(f2);
        return -1;
    }

    int ch1, ch2;
    *bytes_examined = 0;
    int identical = 1;

    while (1) {
        ch1 = fgetc(f1);
        ch2 = fgetc(f2);

        if (ch1 == EOF || ch2 == EOF) {
            if (ch1 == EOF && ch2 == EOF)
                identical = 1;
            else
                identical = 0;
            break;
        }

        (*bytes_examined)++;
        if (ch1 != ch2) {
            identical = 0;
            break;
        }
    }

    fclose(f1);
    fclose(f2);
    return identical;
}

int main(void) {
    char dir1[PATH_MAX], dir2[PATH_MAX];
    int N;

    printf("Введите имя первого каталога (Dir1): ");
    if (scanf("%511s", dir1) != 1) {
        fprintf(stderr, "Ошибка ввода каталога\n");
        exit(EXIT_FAILURE);
    }

    printf("Введите имя второго каталога (Dir2): ");
    if (scanf("%511s", dir2) != 1) {
        fprintf(stderr, "Ошибка ввода каталога\n");
        exit(EXIT_FAILURE);
    }

    printf("Введите максимальное число одновременно работающих процессов (N): ");
    if (scanf("%d", &N) != 1 || N <= 0) {
        fprintf(stderr, "Ошибка ввода числа N\n");
        exit(EXIT_FAILURE);
    }

    DIR *d1 = opendir(dir1);
    DIR *d2 = opendir(dir2);
    if (!d1 || !d2) {
        perror("Ошибка открытия каталога");
        exit(EXIT_FAILURE);
    }

    struct dirent *entry;
    int active_children = 0;

    while ((entry = readdir(d1)) != NULL) {
        if (entry->d_name[0] == '.') continue;

        char filepath1[PATH_MAX];
        if (snprintf(filepath1, sizeof(filepath1), "%s/%s", dir1, entry->d_name) >= sizeof(filepath1)) {
            fprintf(stderr, "Ошибка: путь '%s/%s' слишком длинный (макс. длина %d)\n", dir1, entry->d_name, PATH_MAX);
            continue;
        }

        if (!is_regular_file(filepath1)) continue;

        rewinddir(d2);
        while ((entry = readdir(d2)) != NULL) {
            if (entry->d_name[0] == '.') continue;

            char filepath2[PATH_MAX];
            if (snprintf(filepath2, sizeof(filepath2), "%s/%s", dir2, entry->d_name) >= sizeof(filepath2)) {
                fprintf(stderr, "Ошибка: путь '%s/%s' слишком длинный (макс. длина %d)\n", dir2, entry->d_name, PATH_MAX);
                continue;
            }

            if (!is_regular_file(filepath2)) continue;

            while (active_children >= N) {
                wait(NULL);
                active_children--;
            }

            pid_t pid = fork();
            if (pid < 0) {
                perror("fork");
                exit(EXIT_FAILURE);
            }
            if (pid == 0) {
                long bytes_examined = 0;
                int cmp = compare_files(filepath1, filepath2, &bytes_examined);
                printf("PID: %d, Файлы: '%s' и '%s', Байт: %ld, Результат: %s\n",
                        getpid(), filepath1, filepath2, bytes_examined,
                        (cmp == 1) ? "совпадают" : ((cmp == 0) ? "отличаются" : "ошибка"));
                exit(0);
            } else {
                active_children++;
            }
        }
    }
    while (active_children > 0) {
        wait(NULL);
        active_children--;
    }

    closedir(d1);
    closedir(d2);
    return 0;
}
        
